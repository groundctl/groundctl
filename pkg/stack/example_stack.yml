version: "1.0"

name: "web-app-stack"
display_name: "Web Application Stack"
description: "Deploys a simple web application with VPC, EC2 instance, and security group"

provider:
  type: github.com/groundctl/aws-provider # or github.com/groundctl/aws-provider
  properties:
    access_key: "{{ $.secret.aws_access_key }}"
    secret_key: "{{ $.secret.aws_secret_key }}"

# Same as inputs, but defined/stored elsewhere, always required, and injected at deploy-time
secrets:
  aws_access_key:
    type: string
    label: AWS Access Key
    description: The production environment AWS access key
  aws_secret_key:
    type: string
    label: AWS Secret Key
    description: The production environment AWS secret key

inputs:
  environment:
    type: string
    allowed:
      - label: Development
        value: dev
      - label: Staging
        value: staging
      - label: Production
        value: prod
    required: true
    description: Target environment for this deployment
    label: Environment

  instance_type:
    type: string
    default: t3.micro
    description: EC2 instance size
    label: EC2 Instance Type

layers:
  - name: networking
    steps:
      - name: Create VPC
        aws.vpc:
          name: my-vpc
          cidr_block: 10.0.0.0/16
        register: my_vpc

      - name: Create Subnet
        aws.subnet:
          name: my-subnet
          vpc_id: "{{ $.my_vpc.id }}"
          cidr_block: 10.0.1.0/24
        register: my_subnet

  - name: compute
    steps:
      - name: Create Security Group
        aws.security_group:
          name: "web-sg-{{ $.input.environment }}"
          description: Allow HTTP and SSH
          ingress:
            - protocol: tcp
              from_port: 80
              to_port: 80
              cidr_blocks: ["0.0.0.0/0"]
            - protocol: tcp
              from_port: 22
              to_port: 22
              cidr_blocks: ["0.0.0.0/0"]
        register: web_sg

      - name: Launch EC2 Instance
        aws.ec2:
          ami: ami-1234567890abcdef0
          instance_type: "{{ $.input.instance_type }}"
          subnet_id: "{{ $.my_subnet.id }}"
          security_groups: ["{{ $.web_sg.id }}"]
        register: web_instance

outputs:
  instance_id:
    value: "{{ $.web_instance.id }}"
    description: "ID of the deployed EC2 instance"

  public_ip:
    value: "{{ $.web_instance.public_ip }}"
    description: "Public IP address of the instance"
